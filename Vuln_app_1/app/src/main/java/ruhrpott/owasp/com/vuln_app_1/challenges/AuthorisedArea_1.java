package ruhrpott.owasp.com.vuln_app_1.challenges;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import ruhrpott.owasp.com.vuln_app_1.R;


public class AuthorisedArea_1 extends Fragment{

    public static AuthorisedArea_1 newInstance() {
        AuthorisedArea_1 fragment = new AuthorisedArea_1();
        return fragment;
    }

    public AuthorisedArea_1() {

    }

    Button ClickMe;
    EditText mEdit;


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_authorised_area_1, container, false);

        ClickMe = (Button) rootView.findViewById(R.id.button);
        ClickMe.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
            mEdit = (EditText) getView().findViewById(R.id.editText_password);
            if(auth(sha1Hash(mEdit.getText().toString()))) {
                FragmentManager fm = getFragmentManager();
                AuthorisedArea_2 f = new AuthorisedArea_2();
                fm.beginTransaction().replace(R.id.main_content,f).commit();
            }
            }
        });
        return rootView;
    }

    public boolean auth(String x) {
        String y = "dd2fe6985dab6b3fb216dca645640c73be6fb112";
        if(x.equals(y)) {
            return true;
        } else {
            return false;
        }
    }

    String sha1Hash( String toHash )
    {
        String hash = null;
        try
        {
            MessageDigest digest = MessageDigest.getInstance( "SHA-1" );
            byte[] bytes = toHash.getBytes("UTF-8");
            digest.update(bytes, 0, bytes.length);
            bytes = digest.digest();
            hash = bytesToHex( bytes );
        }
        catch( NoSuchAlgorithmException e )
        {
            e.printStackTrace();
        }
        catch( UnsupportedEncodingException e )
        {
            e.printStackTrace();
        }
        return hash;
    }


    final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
    public static String bytesToHex( byte[] bytes )
    {
        char[] hexChars = new char[ bytes.length * 2 ];
        for( int j = 0; j < bytes.length; j++ )
        {
            int v = bytes[ j ] & 0xFF;
            hexChars[ j * 2 ] = hexArray[ v >>> 4 ];
            hexChars[ j * 2 + 1 ] = hexArray[ v & 0x0F ];
        }
        return new String( hexChars );
    }
}
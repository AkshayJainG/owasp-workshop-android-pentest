package ruhrpott.owasp.com.vuln_app_1;

import android.os.Bundle;
import android.os.StrictMode;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;

import javax.net.ssl.HttpsURLConnection;

public class SSL_Pinning extends Fragment{

    public static SSL_Pinning newInstance() {
        SSL_Pinning fragment = new SSL_Pinning();
        return fragment;
    }

    public SSL_Pinning() {

    }

    Button ClickMe;
    EditText mEdit;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_pinned_https, container, false);

        ClickMe = (Button) rootView.findViewById(R.id.button);
        ClickMe.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
               issueRequest();
            }
        });
        return rootView;
    }

    public void issueRequest (){
        try {
            boolean certVerified = false;
            String out = "";

            enableStrictMode();
            mEdit   = (EditText) getView().findViewById(R.id.editText3);

            URL url = new URL("https://"+mEdit.getText().toString()+"/index.html");

            try {
                KeyPinStore keystore = KeyPinStore.getInstance();
                HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
                urlConnection.setSSLSocketFactory(keystore.getContext().getSocketFactory());
                InputStream instream = urlConnection.getInputStream();
                out += readStream(instream);
            } catch (Exception e){
                Log.e("SSL",e.toString());
                out += e.toString();
            }
            TextView textView = (TextView) getView().findViewById(R.id.textView7);
            textView.setText(out);
        } catch (Exception e) {
            TextView textView = (TextView) getView().findViewById(R.id.textView7);
            textView.setText("Something went wrong: "+e.toString());
        }
    }

    private String readStream(InputStream is) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader r = new BufferedReader(new InputStreamReader(is),1000);
        for (String line = r.readLine(); line != null; line =r.readLine()){
            sb.append(line);
        }
        is.close();
        return sb.toString();
    }

    //dirty workaround to allow asynchronous http requests from fragment
    public void enableStrictMode()
    {
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
    }
}
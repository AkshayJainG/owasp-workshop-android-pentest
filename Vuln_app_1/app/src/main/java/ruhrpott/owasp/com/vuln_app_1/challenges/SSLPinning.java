package ruhrpott.owasp.com.vuln_app_1.challenges;

import android.os.Bundle;
import android.os.StrictMode;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;

import ruhrpott.owasp.com.vuln_app_1.R;

public class SSLPinning extends Fragment{

    public static SSLPinning newInstance() {
        SSLPinning fragment = new SSLPinning();
        return fragment;
    }

    public SSLPinning() {

    }

    Button ClickMe;
    EditText mEdit;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_ssl_pinned, container, false);

        ClickMe = (Button) rootView.findViewById(R.id.button);
        ClickMe.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
               issueRequest();
            }
        });
        return rootView;
    }

    public void issueRequest (){
        try {
            boolean certVerified = false;
            String out = "";

            enableStrictMode();
            mEdit   = (EditText) getView().findViewById(R.id.editText_ip);

            URL url = new URL("https://"+mEdit.getText().toString()+"/index.html");

            try {
                SSLPinning_KeyPinStore keystore = SSLPinning_KeyPinStore.getInstance();
                HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
                urlConnection.setSSLSocketFactory(keystore.getContext().getSocketFactory());
                InputStream instream = urlConnection.getInputStream();
                out += readStream(instream);
            } catch (Exception e){
                Log.e("SSL",e.toString());
                out += "Something went wrong:\n"+e.toString();
            }
            TextView textView = (TextView) getView().findViewById(R.id.textView_result);
            textView.setText(out);
        } catch (Exception e) {
            TextView textView = (TextView) getView().findViewById(R.id.textView_result);
            textView.setText("Something went wrong:\n"+e.toString());
        }
    }

    private String readStream(InputStream is) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader r = new BufferedReader(new InputStreamReader(is),1000);
        for (String line = r.readLine(); line != null; line =r.readLine()){
            sb.append(line);
        }
        is.close();
        return sb.toString();
    }

    //dirty workaround to allow asynchronous http requests from fragment
    public void enableStrictMode()
    {
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
    }
}